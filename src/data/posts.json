{"posts":[{"id":102,"date":"2017-07-21T17:31:43","date_gmt":"2017-07-21T17:31:43","guid":{"rendered":"http://portfolio.dev/?p=102"},"modified":"2017-07-21T19:25:35","modified_gmt":"2017-07-21T19:25:35","slug":"how-this-site-is-built","status":"publish","type":"post","link":"http://portfolio.dev/2017/07/21/how-this-site-is-built/","title":{"rendered":"WordPress for Static Sites: A Look Inside This Site"},"content":{"rendered":"<p>I&#8217;m really excited to launch my new portfolio site. It&#8217;s an improvement upon the old version in some mission-critical ways: it does a much better job of highlighting my non-client projects, it actually has a blog, and it&#8217;s amazingly less buggy. But more than any of that, it was a chance to play around with an architecture that I&#8217;ve been mentally advocating for awhile, as well a chance to road-test two open source projects that I&#8217;ve worked on, <a href=\"https://github.com/ethanbutler/serve-the-base\">serve-the-base</a> and <a href=\"https://github.com/ethanbutler/medusa\">medusa</a>.</p>\n<p>Aside from the site navigation and the &#8220;Me&#8221; page, the content for this site is managed entirely through a WordPress installation on my local machine – however, the public-facing version of the site is a React application served via Express. There&#8217;s no database on the production server. All the content you&#8217;re seeing is stored as JSON data that&#8217;s bundled with the application JavaScript using WebPack. When you load this site, you&#8217;re never making HTTP requests to fetch new content*.</p>\n<p>Essentially, I&#8217;m using WordPress to manage</p>\n<h3>Wait, why?</h3>\n<p>There are a few reasons why I wanted to build this site like this. Here were my goals, each of which I&#8217;ll spend some time unpacking:</p>\n<ol>\n<li>I want a friendly, familiar interface for building content.</li>\n<li>I don&#8217;t want to have to worry about things breaking in the future.</li>\n<li>I want to play around with cool shit.</li>\n</ol>\n<p>Let&#8217;s break that down.</p>\n<p>First, managing content through WordPress is really, really easy. WordPress is incredibly flexible in terms of adding new types of content and new meta fields. Writing content is a legitimately enjoyable experience. I never want to use anything but WordPress for that purpose. Otherwise, I&#8217;d be stuck editing JSON if I need to fix a typo and I don&#8217;t want to do that. Next.</p>\n<p>Second, as much as I love WordPress, it comes with some baggage: you need security plugins, which need to be updated. Other plugins you&#8217;re using might cause conflicts and break. As much as we&#8217;d like to think otherwise, we all know what I&#8217;m talking about. Obviously, there are steps to mitigate risks, but I want to build something that works and will continue to work – I want to spend my limited time maintaining client projects, not my own site. It&#8217;s a fact that static sites don&#8217;t get hacked and they rarely break unexpectedly. Next.</p>\n<p>Third, the stack that I&#8217;m using most certainly lets me do cool shit. Here&#8217;s a big one: once you&#8217;ve loaded the site&#8217;s JavaScript, you don&#8217;t need to make any subsequent HTTP requests for content*. Therefore, the site can be served as a progressive web app, complete with service workers – meaning the site can be run with no internet connection. I don&#8217;t know why you&#8217;d need to look at my portfolio site if you&#8217;re offline, but I&#8217;d be flattered if you did. More realistically, content on this site loads <i>instantly</i> because you don&#8217;t need an HTTP round-trip for new pages.</p>\n<p><small>*This is a <em>small</em> fib: you do need to make subsequent requests for images and the iframe content on the &#8220;Talks&#8221; page, which come from Amazon S3 and WordPress.tv, respectively.</small></p>\n<p>With the motivations covered, let&#8217;s talk about the tools I used to build this:</p>\n<h3>Serve The Base</h3>\n<p>First, let&#8217;s talk about the content creation process for the site. My local WordPress install runs <a href=\"https://github.com/ethanbutler/serve-the-base\">serve-the-base</a>.</p>\n<p>serve-the-base is a parent theme I built for rapidly engineering content-driven REST APIs. It reads a data schema (including post types, taxonomies, and custom meta fields) from a JSON file and generates everything you need to start putting together your data: it registers custom types and taxonomies, creates REST endpoints for them, creates fields for you using CMB2, and adds those fields to the REST responses.</p>\n<p>A snippet of my schema.json file looks like <a href=\"https://gist.github.com/ethanbutler/0c5b6165eea43df1e97bdb551c54d037\">this gist on GitHub</a>. Pretty readable, right? You&#8217;ll notice a few things in the gist:</p>\n<ol>\n<li>We&#8217;re specifying a custom post type label and what options that type supports</li>\n<li>We&#8217;re specifying a custom taxonomy and what post types it describes, as well as that it should be hierarchical</li>\n<li>We&#8217;re adding a custom text field for &#8220;Timeframe&#8221;, and specifying what post type it belongs to</li>\n</ol>\n<p>Obviously my site uses more fields than this, but this highlights the key concepts.</p>\n<p>Under the hood, this is basically syntactic sugar for code that I <em>really</em> hate having to write*: all the tedious and repetitive code that goes into registering types, taxonomies, and fields, as well as having to dig through the REST API codex to figure out how to get things to show up how you want. By abstracting all that away, we can focus on the fun part: figuring out useful data structures, and then creating data.</p>\n<p><small>*Or more usually, copy-and-paste. Which I hate for other, similarly DRY related reasons.</small></p>\n<p>Not counting the time I spent knocking out a few minor bugs with serve-the-base, creating a fully-functional REST API for the project took me about five minutes to put together. Less time than it took for me to remember how to enable thumbnails for custom post types. Very painless stuff.</p>\n<h3>Medusa</h3>\n<p>So we have a pretty sweet content creation experience. You might be wondering, though – what was the point of creating a REST API if end-users don&#8217;t touch it?</p>\n<p><a href=\"https://www.npmjs.com/package/medusa-wp\">Medusa</a> is a Node.js CLI tool I built that helps answer that question. Medusa makes GET requests to REST endpoints, scrapes them recursively, and spits data out as JSON. From there, you can do whatever you need with that JSON data – in this case, bundling it up with WebPack and serve it with the application.</p>\n<p>(It&#8217;s named because the mythological Medusa took dynamic, living things, and made them static. I&#8217;ve been told the logic behind this isn&#8217;t obvious enough.)</p>\n<p>A sample call to medusa might look like:</p>\n<pre>medusa http://portfolio.dev -t projects -p order=asc -o projects.json</pre>\n<p>That command will create a JSON dump of every single &#8220;projects&#8221; on your site in ascending order. There are some more advanced things you can do with it, but that&#8217;s the basic idea. Because we&#8217;ve used serve-the-base to register our data schema, that post type (and all relevant custom meta fields) will be contained in the response.</p>\n<p>Whenever we add new content, we just need to run the above command (which could be contained as part of a &#8220;build&#8221; script in a package.json file and run with &#8220;npm run build&#8221;) and our project content will be updated. Publishing feels more like code deployment, and content can be version controlled. It takes a little getting used to, but I actually <em>love</em> this workflow.</p>\n<p>You could basically do the same thing by writing a script to read from your MySQL database and spit stuff out as JSON, but this was easier for me to write. Plus, if there&#8217;s a public-facing REST API on a remote WordPress site you&#8217;d like to scrape, it works over HTTP with no need for database access! (Obviously, use this responsively.)</p>\n<h3>Moving forward</h3>\n<p>As I continue to blog (or pick up new clients)  this architecture isn&#8217;t sustainable. It would be an obviously terrible idea to serve bundle an entire blog&#8217;s worth of JSON into the initial load. For now, though, since this is my first and only post, that seems very much like a problem for a-few-months-from-now Ethan.</p>\n<p>I think this architecture really, really makes sense for small-scale projects such as this. I&#8217;ve built sites that are like four pages. Hell, I&#8217;ve build a site that was a single page – not a single-page application, mind you, but a literal single page. WordPress is not the right tool for those projects, but it might be the right tool for managing content. You don&#8217;t even have to use React – Medusa would be a great tool to use alongside a setup like an Express application running a templating engine like Pug, to pick a few favorite tools at random.</p>\n<p>If you have any questions, let me know on <a href=\"https://twitter.com/ethanfbutler\">Twitter</a>. I&#8217;m hoping to blog about the client-side code in the future – it&#8217;s a pretty straight-forward SPA built with <a href=\"https://github.com/facebookincubator/create-react-app\">create-react-app</a> and <a href=\"https://github.com/ReactTraining/react-router\">react-router v4</a>, so if that sounds interesting to you let me know!</p>\n<p>&nbsp;</p>\n","protected":false},"excerpt":{"rendered":"<p>I&#8217;m really excited to launch my new portfolio site. It&#8217;s an improvement upon the old version in some mission-critical ways: it does a much better job of highlighting my non-client projects, it actually has a blog, and it&#8217;s amazingly less buggy. But more than any of that, it was a chance to play around with [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[1],"tags":[],"featured_media_objects":[false,false,false,false],"_links":{"self":[{"href":"http://portfolio.dev/wp-json/wp/v2/posts/102"}],"collection":[{"href":"http://portfolio.dev/wp-json/wp/v2/posts"}],"about":[{"href":"http://portfolio.dev/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"http://portfolio.dev/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"http://portfolio.dev/wp-json/wp/v2/comments?post=102"}],"version-history":[{"href":"http://portfolio.dev/wp-json/wp/v2/posts/102/revisions"}],"wp:attachment":[{"href":"http://portfolio.dev/wp-json/wp/v2/media?parent=102"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"http://portfolio.dev/wp-json/wp/v2/categories?post=102"},{"taxonomy":"post_tag","embeddable":true,"href":"http://portfolio.dev/wp-json/wp/v2/tags?post=102"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}}]}